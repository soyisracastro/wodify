// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  level         UserLevel @default(BEGINNER)
  location      Location  @default(GYM)
  equipment     Equipment @default(FULL)
  injuries      String?   // JSON string of user injuries/limitations
  preferences   Json?     // Additional user preferences
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  generatedWods GeneratedWod[]
  progress      UserProgress[]
  favorites     WodFavorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application specific models
model PresetWod {
  id          String   @id @default(cuid())
  title       String
  description String?
  difficulty  WodDifficulty @default(INTERMEDIATE)
  duration    String?  // e.g., "45 minutes"
  equipment   Equipment
  location    Location
  category    String?  // e.g., "Strength", "Conditioning", "Mixed"
  tags        String[] // Array of tags for filtering
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sections    WodSection[]
  favorites   WodFavorite[]
}

model GeneratedWod {
  id          String   @id @default(cuid())
  title       String
  userId      String
  isCustom    Boolean  @default(false)
  parameters  Json     // Parameters used for generation
  createdAt   DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections    WodSection[]
  progress    UserProgress[]
}

model WodSection {
  id              String @id @default(cuid())
  title           String
  type            WodSectionType
  duration        String?
  description     String?
  movements       String[] // Array of movements
  sets            String?
  reps            String?
  weight          String?
  notes           String?
  order           Int    @default(0)
  createdAt       DateTime @default(now())

  presetWodId     String?
  generatedWodId  String?

  presetWod       PresetWod?     @relation(fields: [presetWodId], references: [id], onDelete: Cascade)
  generatedWod    GeneratedWod?  @relation(fields: [generatedWodId], references: [id], onDelete: Cascade)

  @@index([presetWodId])
  @@index([generatedWodId])
}

model UserProgress {
  id              String   @id @default(cuid())
  userId          String
  generatedWodId  String
  completedAt     DateTime @default(now())
  duration        Int?     // Duration in minutes
  notes           String?
  rating          Int?     // 1-5 rating
  perceivedEffort Int?     // RPE 1-10

  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedWod    GeneratedWod @relation(fields: [generatedWodId], references: [id], onDelete: Cascade)

  @@unique([userId, generatedWodId])
  @@index([userId])
  @@index([generatedWodId])
}

model WodFavorite {
  id         String @id @default(cuid())
  userId     String
  presetWodId String
  createdAt  DateTime @default(now())

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  presetWod  PresetWod @relation(fields: [presetWodId], references: [id], onDelete: Cascade)

  @@unique([userId, presetWodId])
  @@index([userId])
  @@index([presetWodId])
}

// Enums
enum UserRole {
  USER
  ADMIN
  COACH
}

enum UserLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Location {
  GYM
  HOME
}

enum Equipment {
  FULL
  BODYWEIGHT
  LIMITED
}

enum WodDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ELITE
}

enum WodSectionType {
  WARMUP
  STRENGTH
  SKILL
  METCON
  COOLDOWN
}
